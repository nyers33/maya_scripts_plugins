# include pinwheel_util
import maya.mel as mel

# geometry - pinwheel quad from 5 planes
mainPlane = cmds.polyPlane( w=2.0, h=2.0, sx=24, sy=24, cuv=0, name="planeGEO1" )
sidePlain = cmds.polyPlane( w=2.0, h=3.0, sx=24, sy=18, cuv=0, name="planeGEO2" )
cmds.setAttr( 'planeGEO2.translate', 0.0, 0.0, 2.5, type="double3" )
cmds.setAttr( 'planeGEO2.rotate', 0.0, 0.0, 0.0, type="double3" )
cmds.lattice( dv=(2, 2, 2), oc=True )
cmds.select( 'ffd1Lattice.pt[1][0:1][1]',r=True )
cmds.move( 3,0,0,r=True )
cmds.select( 'ffd1Lattice.pt[0][0:1][1]',r=True )
cmds.move( -3,0,0,r=True )
cmds.delete( sidePlain, constructionHistory=True )
cmds.select( 'planeGEO2' )
cmds.move( 0, 0, 0, 'planeGEO2.scalePivot', 'planeGEO2.rotatePivot', absolute=True )
cmds.makeIdentity( apply=True, t=1, r=1, s=1, n=0 )
cmds.duplicate( 'planeGEO2', rr=True )
cmds.setAttr( 'planeGEO3.rotate', 0.0, 90.0, 0.0, type="double3" )
cmds.makeIdentity( apply=True, t=1, r=1, s=1, n=0 )
cmds.duplicate( 'planeGEO3', rr=True )
cmds.setAttr( 'planeGEO4.rotate', 0.0, 90.0, 0.0, type="double3" )
cmds.makeIdentity( apply=True, t=1, r=1, s=1, n=0 )
cmds.duplicate( 'planeGEO4', rr=True )
cmds.setAttr( 'planeGEO5.rotate', 0.0, 90.0, 0.0, type="double3" )
cmds.makeIdentity( apply=True, t=1, r=1, s=1, n=0 )
cmds.polyUnite( 'planeGEO1', 'planeGEO2', 'planeGEO3', 'planeGEO4', 'planeGEO5', n='pinwheelGEO1' )
cmds.delete( 'pinwheelGEO1', ch=1 )

# geometry - uv planar projection for pinwheel
cmds.polyUVSet( rename=True, newUVSet='uvSet' )
cmds.polyProjection( 'pinwheelGEO1.f[*]', type='Planar', md='y', ibd=True, ch=False )

# texture - albedo for pinwheel
rampTexture = cmds.shadingNode( 'ramp', name='ramp_cross', asTexture=True )
place2dTexture = cmds.shadingNode( 'place2dTexture', name='p2dtext_cross', asUtility=True )
cmds.connectAttr( place2dTexture+'.outUV', rampTexture+'.uv' )
cmds.connectAttr( place2dTexture+'.outUvFilterSize', rampTexture+'.uvFilterSize' )
cmds.setAttr( rampTexture+'.type', 6 )
cmds.setAttr( rampTexture+'.interpolation', 0 )
cmds.setAttr( rampTexture+'.colorEntryList[1].position', 0.0 )
cmds.setAttr( rampTexture+'.colorEntryList[2].position', 0.05 )
cmds.setAttr( rampTexture+'.colorEntryList[1].color', 0.000, 0.000, 0.000, type='double3' )
cmds.setAttr( rampTexture+'.colorEntryList[2].color', 1.000, 1.000, 1.000, type='double3' )
cmds.setAttr( place2dTexture+'.rotateUV', 45 )

reverseNode = cmds.shadingNode( 'reverse', name='reverse_cross', asTexture=True )
cmds.connectAttr( 'ramp_cross'+'.outAlpha', 'reverse_cross'+'.inputX', force=True )

rampTexture = cmds.shadingNode( 'ramp', name='ramp_rectangle', asTexture=True )
place2dTexture = cmds.shadingNode( 'place2dTexture', name='p2dtext_rectangle', asUtility=True )
cmds.connectAttr( place2dTexture+'.outUV', rampTexture+'.uv' )
cmds.connectAttr( place2dTexture+'.outUvFilterSize', rampTexture+'.uvFilterSize' )
cmds.setAttr( rampTexture+'.type', 5 )
cmds.setAttr( rampTexture+'.interpolation', 0 )
cmds.setAttr( rampTexture+'.colorEntryList[0].position', 0.0 )
cmds.setAttr( rampTexture+'.colorEntryList[1].position', 0.95 )
cmds.setAttr( rampTexture+'.colorEntryList[0].color', 1.000, 1.000, 1.000, type='double3' )
cmds.setAttr( rampTexture+'.colorEntryList[1].color', 0.000, 0.000, 0.000, type='double3' )

reverseNode = cmds.shadingNode( 'reverse', name='reverse_rectangle', asTexture=True )
cmds.connectAttr( 'ramp_rectangle'+'.outAlpha', 'reverse_rectangle'+'.inputX', force=True )

checkerTexture = cmds.shadingNode( 'checker', name='checker_quarter_slice1', asTexture=True )
place2dTexture = cmds.shadingNode( 'place2dTexture', name='p2dtext_quarter_slice1', asUtility=True )
cmds.connectAttr( place2dTexture+'.outUV', checkerTexture+'.uv' )
cmds.connectAttr( place2dTexture+'.outUvFilterSize', checkerTexture+'.uvFilterSize' )
cmds.setAttr( place2dTexture+'.coverageU', 0.5 )
cmds.setAttr( place2dTexture+'.coverageV', 1.0 )
cmds.setAttr( place2dTexture+'.repeatU', math.sqrt(2)*0.25 )
cmds.setAttr( place2dTexture+'.repeatV', math.sqrt(2)*0.50 )
cmds.setAttr( place2dTexture+'.offsetU', -math.sqrt(2)*0.5*(1.0-math.sqrt(2)*0.5) )
cmds.setAttr( place2dTexture+'.offsetV', -math.sqrt(2)*0.5*(1.0-math.sqrt(2)*0.5) )
cmds.setAttr( place2dTexture+'.rotateUV', 45.0 )
cmds.setAttr( checkerTexture+'.color1', 0.000, 0.000, 0.000, type='double3' )
cmds.setAttr( checkerTexture+'.color2', 1.000, 1.000, 1.000, type='double3' )
cmds.setAttr( checkerTexture+'.defaultColor', 0.000, 0.000, 0.000, type='double3' )
cmds.setAttr( checkerTexture+'.alphaIsLuminance', 1 )

for i in range(3):
	cmds.duplicate( checkerTexture, rr=True )
	cmds.duplicate( place2dTexture, rr=True )
	cmds.connectAttr( 'p2dtext_quarter_slice'+str(i+2)+'.outUV', 'checker_quarter_slice'+str(i+2)+'.uv' )
	cmds.connectAttr( 'p2dtext_quarter_slice'+str(i+2)+'.outUvFilterSize', 'checker_quarter_slice'+str(i+2)+'.uvFilterSize' )
	cmds.setAttr( 'p2dtext_quarter_slice'+str(i+2)+'.rotateFrame', (i+1)*90.0 )

layeredTexture = cmds.shadingNode( 'layeredTexture', name='pinwheel_layered_01', asTexture=True )
cmds.connectAttr( 'ramp_cross'+'.outColor', layeredTexture+'.inputs[0].color', force=True )
cmds.setAttr( layeredTexture+'.inputs[0].alpha', 1 )
cmds.connectAttr( 'reverse_cross'+'.outputX', layeredTexture+'.inputs[0].alpha', force=True )
cmds.setAttr( layeredTexture+'.inputs[0].blendMode', 6 )
cmds.connectAttr( 'ramp_rectangle'+'.outColor', layeredTexture+'.inputs[1].color', force=True )
cmds.setAttr( layeredTexture+'.inputs[1].alpha', 1 )
cmds.connectAttr( 'reverse_rectangle'+'.outputX', layeredTexture+'.inputs[1].alpha', force=True )
cmds.setAttr( layeredTexture+'.inputs[1].blendMode', 1 )
cmds.setAttr( layeredTexture+'.inputs[2].color', 1.000, 0.000, 0.000, type='double3' )
cmds.setAttr( layeredTexture+'.inputs[2].alpha', 1 )
cmds.setAttr( layeredTexture+'.inputs[2].blendMode', 1 )
cmds.setAttr( layeredTexture+'.inputs[3].color', 0.000, 1.000, 0.000, type='double3' )
cmds.setAttr( layeredTexture+'.inputs[3].alpha', 1 )
cmds.setAttr( layeredTexture+'.inputs[3].blendMode', 1 )
cmds.setAttr( layeredTexture+'.inputs[4].color', 1.000, 1.000, 0.000, type='double3' )
cmds.setAttr( layeredTexture+'.inputs[4].alpha', 1 )
cmds.setAttr( layeredTexture+'.inputs[4].blendMode', 1 )
cmds.setAttr( layeredTexture+'.inputs[5].color', 0.000, 0.000, 1.000, type='double3' )
cmds.setAttr( layeredTexture+'.inputs[5].alpha', 1 )
cmds.setAttr( layeredTexture+'.inputs[5].blendMode', 1 )
cmds.connectAttr( 'checker_quarter_slice1'+'.outAlpha', layeredTexture+'.inputs[2].alpha', force=True )
cmds.connectAttr( 'checker_quarter_slice2'+'.outAlpha', layeredTexture+'.inputs[3].alpha', force=True )
cmds.connectAttr( 'checker_quarter_slice3'+'.outAlpha', layeredTexture+'.inputs[4].alpha', force=True )
cmds.connectAttr( 'checker_quarter_slice4'+'.outAlpha', layeredTexture+'.inputs[5].alpha', force=True )

rampTexture = cmds.shadingNode( 'ramp', name='ramp_rainbow_slice1', asTexture=True )
place2dTexture = cmds.shadingNode( 'place2dTexture', name='p2dtext_rainbow_slice1', asUtility=True )
cmds.connectAttr( place2dTexture+'.outUV', rampTexture+'.uv' )
cmds.connectAttr( place2dTexture+'.outUvFilterSize', rampTexture+'.uvFilterSize' )
cmds.setAttr( place2dTexture+'.rotateFrame', 90.0 )
cmds.setAttr( rampTexture+'.type', 2 )
cmds.setAttr( rampTexture+'.interpolation', 4 )
cmds.setAttr( rampTexture+'.colorEntryList[0].position', 0.125 )
cmds.setAttr( rampTexture+'.colorEntryList[1].position', 0.500 )
cmds.setAttr( rampTexture+'.colorEntryList[2].position', 0.875 )
cmds.setAttr( rampTexture+'.colorEntryList[0].color', 1.000, 0.000, 0.000, type='double3' )
cmds.setAttr( rampTexture+'.colorEntryList[1].color', 1.000, 1.000, 0.000, type='double3' )
cmds.setAttr( rampTexture+'.colorEntryList[2].color', 0.000, 0.000, 1.000, type='double3' )

for i in range(3):
	cmds.duplicate( rampTexture, rr=True )
	cmds.duplicate( place2dTexture, rr=True )
	cmds.connectAttr( 'p2dtext_rainbow_slice'+str(i+2)+'.outUV', 'ramp_rainbow_slice'+str(i+2)+'.uv' )
	cmds.connectAttr( 'p2dtext_rainbow_slice'+str(i+2)+'.outUvFilterSize', 'ramp_rainbow_slice'+str(i+2)+'.uvFilterSize' )
	cmds.setAttr( 'p2dtext_rainbow_slice'+str(i+2)+'.rotateFrame', 90.0-(i+1)*90 )

layeredTexture = cmds.shadingNode( 'layeredTexture', name='pinwheel_layered_02', asTexture=True )
cmds.connectAttr( 'ramp_cross'+'.outColor', layeredTexture+'.inputs[0].color', force=True )
cmds.setAttr( layeredTexture+'.inputs[0].alpha', 1 )
cmds.connectAttr( 'reverse_cross'+'.outputX', layeredTexture+'.inputs[0].alpha', force=True )
cmds.setAttr( layeredTexture+'.inputs[0].blendMode', 6 )
cmds.connectAttr( 'ramp_rectangle'+'.outColor', layeredTexture+'.inputs[1].color', force=True )
cmds.setAttr( layeredTexture+'.inputs[1].alpha', 1 )
cmds.connectAttr( 'reverse_rectangle'+'.outputX', layeredTexture+'.inputs[1].alpha', force=True )
cmds.setAttr( layeredTexture+'.inputs[1].blendMode', 1 )
cmds.connectAttr( 'ramp_rainbow_slice1'+'.outColor', layeredTexture+'.inputs[2].color', force=True )
cmds.setAttr( layeredTexture+'.inputs[2].alpha', 1 )
cmds.setAttr( layeredTexture+'.inputs[2].blendMode', 1 )
cmds.connectAttr( 'ramp_rainbow_slice2'+'.outColor', layeredTexture+'.inputs[3].color', force=True )
cmds.setAttr( layeredTexture+'.inputs[3].alpha', 1 )
cmds.setAttr( layeredTexture+'.inputs[3].blendMode', 1 )
cmds.connectAttr( 'ramp_rainbow_slice3'+'.outColor', layeredTexture+'.inputs[4].color', force=True )
cmds.setAttr( layeredTexture+'.inputs[4].alpha', 1 )
cmds.setAttr( layeredTexture+'.inputs[4].blendMode', 1 )
cmds.connectAttr( 'ramp_rainbow_slice4'+'.outColor', layeredTexture+'.inputs[5].color', force=True )
cmds.setAttr( layeredTexture+'.inputs[5].alpha', 1 )
cmds.setAttr( layeredTexture+'.inputs[5].blendMode', 1 )
cmds.connectAttr( 'checker_quarter_slice1'+'.outAlpha', layeredTexture+'.inputs[2].alpha', force=True )
cmds.connectAttr( 'checker_quarter_slice2'+'.outAlpha', layeredTexture+'.inputs[3].alpha', force=True )
cmds.connectAttr( 'checker_quarter_slice3'+'.outAlpha', layeredTexture+'.inputs[4].alpha', force=True )
cmds.connectAttr( 'checker_quarter_slice4'+'.outAlpha', layeredTexture+'.inputs[5].alpha', force=True )

gridTexture = cmds.shadingNode( 'grid', name='grid_decor_01', asTexture=True )
place2dTexture = cmds.shadingNode( 'place2dTexture', name='p2dtext_grid_decor_01', asUtility=True )
cmds.connectAttr( place2dTexture+'.outUV', gridTexture+'.uv' )
cmds.connectAttr( place2dTexture+'.outUvFilterSize', gridTexture+'.uvFilterSize' )
cmds.setAttr( place2dTexture+'.repeatU', 0.5 )
cmds.setAttr( place2dTexture+'.repeatV', 16 )
cmds.setAttr( place2dTexture+'.translateFrameU', 0.5 )
cmds.setAttr( place2dTexture+'.rotateFrame', -45.0 )
cmds.setAttr( gridTexture+'.uWidth', 0.0125 )
cmds.setAttr( gridTexture+'.vWidth', 0.4000 )
cmds.setAttr( gridTexture+'.alphaIsLuminance', 1 )

gridTexture = cmds.shadingNode( 'grid', name='grid_decor_02', asTexture=True )
place2dTexture = cmds.shadingNode( 'place2dTexture', name='p2dtext_grid_decor_02', asUtility=True )
cmds.connectAttr( place2dTexture+'.outUV', gridTexture+'.uv' )
cmds.connectAttr( place2dTexture+'.outUvFilterSize', gridTexture+'.uvFilterSize' )
cmds.setAttr( place2dTexture+'.repeatU', 0.5 )
cmds.setAttr( place2dTexture+'.repeatV', 16 )
cmds.setAttr( place2dTexture+'.translateFrameU', 0.5 )
cmds.setAttr( place2dTexture+'.rotateFrame', 45.0 )
cmds.setAttr( gridTexture+'.uWidth', 0.0125 )
cmds.setAttr( gridTexture+'.vWidth', 0.4000 )
cmds.setAttr( gridTexture+'.alphaIsLuminance', 1 )

for i in range(4):
	rampTexture = cmds.shadingNode( 'ramp', name='ramp_decor_0'+str(i+1), asTexture=True )
	place2dTexture = cmds.shadingNode( 'place2dTexture', name='p2dtext_ramp_decor_0'+str(i+1), asUtility=True )
	cmds.connectAttr( place2dTexture+'.outUV', rampTexture+'.uv' )
	cmds.connectAttr( place2dTexture+'.outUvFilterSize', rampTexture+'.uvFilterSize' )
	cmds.setAttr( rampTexture+'.type', 2 )
	cmds.setAttr( rampTexture+'.interpolation', 0 )
	cmds.setAttr( rampTexture+'.colorEntryList[0].position', 0.0 )
	cmds.setAttr( rampTexture+'.colorEntryList[1].position', 0.75 )
	cmds.setAttr( rampTexture+'.colorEntryList[0].color', 0.000, 0.000, 0.000, type='double3' )
	cmds.setAttr( rampTexture+'.colorEntryList[1].color', 1.000, 1.000, 1.000, type='double3' )
	cmds.setAttr( place2dTexture+'.rotateFrame', -180+i*90 )

for i in range(4):
	layeredTextureA = cmds.shadingNode( 'layeredTexture', name='layered_decor_mask_0'+str(i*2+1), asTexture=True )
	layeredTextureB = cmds.shadingNode( 'layeredTexture', name='layered_decor_mask_0'+str(i*2+2), asTexture=True )
	cmds.connectAttr( 'checker_quarter_slice'+str(i+1)+'.outColor', layeredTextureA+'.inputs[0].color', force=True )
	cmds.connectAttr( 'checker_quarter_slice'+str(i+1)+'.outColor', layeredTextureB+'.inputs[0].color', force=True )
	cmds.connectAttr( 'ramp_decor_0'+str((i+1) // 5 + (i+1) % 5)+'.outAlpha', layeredTextureA+'.inputs[0].alpha', force=True )
	cmds.connectAttr( 'ramp_decor_0'+str((i+2) // 5 + (i+2) % 5)+'.outAlpha', layeredTextureB+'.inputs[0].alpha', force=True )
	cmds.setAttr( layeredTextureA+'.inputs[0].blendMode', 1 )
	cmds.setAttr( layeredTextureB+'.inputs[0].blendMode', 1 )
	cmds.setAttr( layeredTextureA+'.alphaIsLuminance', 1 )
	cmds.setAttr( layeredTextureB+'.alphaIsLuminance', 1 )

for i in range(4):
	layeredTexture = cmds.shadingNode( 'layeredTexture', name='layered_grid_decor_mask_0'+str(i+1), asTexture=True )
	nLayer = 1
	for iLayer in range(nLayer):
		cmds.connectAttr( 'grid_decor_0'+str(2-i%2)+'.outColor', layeredTexture+'.inputs['+str(iLayer)+'].color', force=True )
		cmds.connectAttr( 'grid_decor_0'+str(1+i%2)+'.outColor', layeredTexture+'.inputs['+str(nLayer+iLayer)+'].color', force=True )
		cmds.connectAttr( 'layered_decor_mask_0'+str(i*2+1)+'.outAlpha', layeredTexture+'.inputs['+str(iLayer)+'].alpha', force=True )
		cmds.connectAttr( 'layered_decor_mask_0'+str(i*2+2)+'.outAlpha', layeredTexture+'.inputs['+str(nLayer+iLayer)+'].alpha', force=True )
	for iLayer in range(2*nLayer):
		cmds.setAttr( layeredTexture+'.inputs['+str(iLayer)+'].blendMode', 4 )
	cmds.setAttr( layeredTexture+'.alphaIsLuminance', 1 )

gridTexture = cmds.shadingNode( 'grid', name='grid_cross', asTexture=True )
place2dTexture = cmds.shadingNode( 'place2dTexture', name='p2dtext_grid_cross', asUtility=True )
cmds.connectAttr( place2dTexture+'.outUV', gridTexture+'.uv' )
cmds.connectAttr( place2dTexture+'.outUvFilterSize', gridTexture+'.uvFilterSize' )
cmds.setAttr( place2dTexture+'.repeatU', 0.5 )
cmds.setAttr( place2dTexture+'.repeatV', 0.5 )
cmds.setAttr( place2dTexture+'.translateFrameU', 0.5 )
cmds.setAttr( place2dTexture+'.translateFrameV', 0.5 )
cmds.setAttr( place2dTexture+'.rotateFrame', 45.0 )
cmds.setAttr( gridTexture+'.uWidth', 0.025 )
cmds.setAttr( gridTexture+'.vWidth', 0.025 )
cmds.setAttr( gridTexture+'.alphaIsLuminance', 1 )
cmds.setAttr( gridTexture+'.lineColor', 1.000, 1.000, 1.000, type='double3' )
cmds.setAttr( gridTexture+'.fillerColor', 0.000, 0.000, 0.000, type='double3' )

layeredTexture = cmds.shadingNode( 'layeredTexture', name='pinwheel_layered_03', asTexture=True )
cmds.setAttr( layeredTexture+'.inputs[0].color', 1.000, 1.000, 1.000, type='double3' )
cmds.connectAttr( 'grid_cross'+'.outAlpha', layeredTexture+'.inputs[0].alpha', force=True )
cmds.setAttr( layeredTexture+'.inputs[0].blendMode', 1 )
cmds.setAttr( layeredTexture+'.inputs[1].color', 1.000, 0.000, 0.000, type='double3' )
cmds.setAttr( layeredTexture+'.inputs[1].alpha', 1 )
cmds.setAttr( layeredTexture+'.inputs[1].blendMode', 1 )
cmds.setAttr( layeredTexture+'.inputs[2].color', 0.000, 1.000, 0.000, type='double3' )
cmds.setAttr( layeredTexture+'.inputs[2].alpha', 1 )
cmds.setAttr( layeredTexture+'.inputs[2].blendMode', 1 )
cmds.setAttr( layeredTexture+'.inputs[3].color', 1.000, 1.000, 0.000, type='double3' )
cmds.setAttr( layeredTexture+'.inputs[3].alpha', 1 )
cmds.setAttr( layeredTexture+'.inputs[3].blendMode', 1 )
cmds.setAttr( layeredTexture+'.inputs[4].color', 0.000, 0.000, 1.000, type='double3' )
cmds.setAttr( layeredTexture+'.inputs[4].alpha', 1 )
cmds.setAttr( layeredTexture+'.inputs[4].blendMode', 1 )
cmds.setAttr( layeredTexture+'.inputs[5].color', 1.000, 1.000, 1.000, type='double3' )
cmds.setAttr( layeredTexture+'.inputs[5].alpha', 1 )
cmds.setAttr( layeredTexture+'.inputs[5].blendMode', 0 )
cmds.connectAttr( 'layered_grid_decor_mask_01'+'.outAlpha', layeredTexture+'.inputs[1].alpha', force=True )
cmds.connectAttr( 'layered_grid_decor_mask_02'+'.outAlpha', layeredTexture+'.inputs[2].alpha', force=True )
cmds.connectAttr( 'layered_grid_decor_mask_03'+'.outAlpha', layeredTexture+'.inputs[3].alpha', force=True )
cmds.connectAttr( 'layered_grid_decor_mask_04'+'.outAlpha', layeredTexture+'.inputs[4].alpha', force=True )

# render - lambert shader
shader = cmds.shadingNode( 'lambert', name='lambert_pinwheel', asShader=True )
cmds.connectAttr( layeredTexture+'.outColor', 'lambert_pinwheel.color', force=True ) 
shading_network = cmds.sets( renderable=True, noSurfaceShader=True, empty=True, name='lambert_pinwheel_SG' )
cmds.connectAttr( 'lambert_pinwheel.outColor', 'lambert_pinwheel_SG.surfaceShader' )
cmds.sets( 'pinwheelGEO1', e=True, forceElement='lambert_pinwheel_SG' )

# texture - rigidity weight texture for pinwheel
rampTexture = cmds.shadingNode( 'ramp', name='ramp_collide_mid', asTexture=True )
place2dTexture = cmds.shadingNode( 'place2dTexture', name='p2dtext_collide_mid', asUtility=True )
cmds.connectAttr( place2dTexture+'.outUV', rampTexture+'.uv' )
cmds.connectAttr( place2dTexture+'.outUvFilterSize', rampTexture+'.uvFilterSize' )
cmds.setAttr( rampTexture+'.type', 4 )
cmds.setAttr( rampTexture+'.interpolation', 4 )
cmds.setAttr( rampTexture+'.colorEntryList[0].position', 0.085 )
cmds.setAttr( rampTexture+'.colorEntryList[1].position', 0.285 )
cmds.setAttr( rampTexture+'.colorEntryList[0].color', 0, 0, 0, type='double3' )
cmds.setAttr( rampTexture+'.colorEntryList[1].color', 1, 1, 1, type='double3' )

rampTexture = cmds.shadingNode( 'ramp', name='ramp_rigid_mid', asTexture=True )
place2dTexture = cmds.shadingNode( 'place2dTexture', name='p2dtext_rigid_mid', asUtility=True )
cmds.connectAttr( place2dTexture+'.outUV', rampTexture+'.uv' )
cmds.connectAttr( place2dTexture+'.outUvFilterSize', rampTexture+'.uvFilterSize' )
cmds.setAttr( rampTexture+'.type', 4 )
cmds.setAttr( rampTexture+'.interpolation', 4 )
cmds.setAttr( rampTexture+'.colorEntryList[0].position', 0.085 )
cmds.setAttr( rampTexture+'.colorEntryList[1].position', 0.285 )
cmds.setAttr( rampTexture+'.colorEntryList[0].color', 128.000, 128.000, 128.000, type='double3' )
cmds.setAttr( rampTexture+'.colorEntryList[1].color', 0.500, 0.500, 0.500, type='double3' )
cmds.setAttr( rampTexture+'.colorEntryList[2].position', 0.175 )
cmds.setAttr( rampTexture+'.colorEntryList[2].color', 16.000, 16.000, 16.000, type='double3' )

rampTexture = cmds.shadingNode( 'ramp', name='ramp_rigid_slice1', asTexture=True )
place2dTexture = cmds.shadingNode( 'place2dTexture', name='p2dtext_rigid_slice1', asUtility=True )
cmds.connectAttr( place2dTexture+'.outUV', rampTexture+'.uv' )
cmds.connectAttr( place2dTexture+'.outUvFilterSize', rampTexture+'.uvFilterSize' )
cmds.setAttr( rampTexture+'.type', 2 )
cmds.setAttr( rampTexture+'.interpolation', 4 )
cmds.setAttr( rampTexture+'.colorEntryList[0].position', 0.0 )
cmds.setAttr( rampTexture+'.colorEntryList[1].position', 0.135 )
cmds.setAttr( rampTexture+'.colorEntryList[0].color', 4.000, 4.000, 4.000, type='double3' )
cmds.setAttr( rampTexture+'.colorEntryList[1].color', 0.000, 0.000, 0.000, type='double3' )
cmds.setAttr( place2dTexture+'.rotateFrame', 90.0 )

for i in range(3):
	cmds.duplicate( rampTexture, rr=True )
	cmds.duplicate( place2dTexture, rr=True )
	cmds.connectAttr( 'p2dtext_rigid_slice'+str(i+2)+'.outUV', 'ramp_rigid_slice'+str(i+2)+'.uv' )
	cmds.connectAttr( 'p2dtext_rigid_slice'+str(i+2)+'.outUvFilterSize', 'ramp_rigid_slice'+str(i+2)+'.uvFilterSize' )
	cmds.setAttr( 'p2dtext_rigid_slice'+str(i+2)+'.rotateFrame', (i+2)*90.0 )

for i in range(4):
	layeredTexture = cmds.shadingNode( 'layeredTexture', name='ramp_rigid_layer'+str(i+1), asTexture=True )
	cmds.connectAttr( 'ramp_rigid_slice'+str(i+1)+'.outAlpha', layeredTexture+'.inputs[0].alpha', force=True )
	cmds.connectAttr( 'checker_quarter_slice'+str(i+1)+'.outColor', layeredTexture+'.inputs[0].color', force=True )
	cmds.setAttr( layeredTexture+'.alphaIsLuminance', 1 )

layeredTexture = cmds.shadingNode( 'layeredTexture', name='layered_rigid', asTexture=True )
for i in range(4):
	cmds.setAttr( layeredTexture+'.inputs['+str(i)+'].blendMode', 1 )
	cmds.connectAttr( 'ramp_rigid_slice'+str(i+1)+'.outColor', layeredTexture+'.inputs['+str(i)+'].color', force=True )
	cmds.connectAttr( 'ramp_rigid_layer'+str(i+1)+'.outAlpha', layeredTexture+'.inputs['+str(i)+'].alpha', force=True )
cmds.connectAttr( 'ramp_rigid_mid'+'.outColor', layeredTexture+'.inputs[4].color', force=True )

# geometry - ground and squeeze plane 
cmds.polyPlane( w=10.0, h=10.0, sx=1, sy=1, name="groundPlaneGEO1" )
cmds.setAttr( 'groundPlaneGEO1.translate', 0.0, -0.05, 0.0, type="double3" )
cmds.polyPlane( w=10.0, h=10.0, sx=1, sy=1, name=" flattenPlaneGEO1" )
cmds.setAttr( 'flattenPlaneGEO1.translate', 0.0, 4.0, 0.0, type="double3" )
cmds.setAttr( 'flattenPlaneGEO1.rotate', 180.0, 0.0, 0.0, type="double3")
cmds.setKeyframe( 'flattenPlaneGEO1', attribute='translateY', v=4.0, t=270 )
cmds.setKeyframe( 'flattenPlaneGEO1', attribute='translateY', v=1.0, t=340 )

groundPlaneCRV1 = cmds.curve( d=1, p=[(-5, -0.05, -5), (5, -0.05, -5), (5, -0.05, 5), (-5, -0.05, 5), (-5, -0.05, -5)], k=[0,1,2,3,4] )
cmds.rename( groundPlaneCRV1, 'groundPlaneCRV1' )
cmds.parent( 'groundPlaneCRV1', 'groundPlaneGEO1' )

flattenPlaneCRV1 = cmds.curve( d=1, p=[(-5, 4, -5), (5, 4, -5), (5, 4, 5), (-5, 4, 5), (-5, 4, -5)], k=[0,1,2,3,4] )
cmds.rename( flattenPlaneCRV1, 'flattenPlaneCRV1' )
cmds.parent( 'flattenPlaneCRV1', 'flattenPlaneGEO1' )

# geometry + animation - cylinder for flattening the mid section of the pinwheel
flattenCylinder = cmds.polyCylinder( n='flattenCylinderGEO1', r=0.525, h=2.0, sx=20, sy=4, sz=6 )
cmds.setAttr( flattenCylinder[0]+'.translate', 0.0, 2.5, 0.0, type="double3" )
cmds.setAttr( flattenCylinder[1]+'.roundCap', 1 )
cmds.setKeyframe( flattenCylinder, attribute='translateY', v=2.5, t=270 )
cmds.setKeyframe( flattenCylinder, attribute='translateY', v=1.65, t=340 )

# animation - folding path visualization
cmds.circle( nr=(1, 0, 0), c=(0, 0, 0), sw=180, r=0.5*math.sqrt(32), n="foldPathCRV1" )
cmds.setAttr( 'foldPathCRV1.rotate', -90.0, 0.0, 0.0, type="double3" )
cmds.move( 0, 0, 0.5*math.sqrt(32), 'foldPathCRV1.scalePivot', 'foldPathCRV1.rotatePivot', absolute=True )
cmds.setAttr( 'foldPathCRV1.translate', 0.0, 0.0, -0.5*math.sqrt(32), type="double3" )
cmds.setAttr( 'foldPathCRV1.rotateY', 90.0/2.0 )
cmds.setAttr( 'foldPathCRV1.scaleZ', 0.66666 )
cmds.makeIdentity( apply=True, t=1, r=1, s=1, n=0 )
cmds.delete( constructionHistory=True )

cmds.duplicate( 'foldPathCRV1', rr=True )
cmds.setAttr( 'foldPathCRV2.rotateY', 90.0 )
cmds.makeIdentity( apply=True, t=1, r=1, s=1, n=0 )
cmds.duplicate( 'foldPathCRV2', rr=True )
cmds.setAttr( 'foldPathCRV3.rotateY', 90.0 )
cmds.makeIdentity( apply=True, t=1, r=1, s=1, n=0 )
cmds.duplicate( 'foldPathCRV3', rr=True )
cmds.setAttr( 'foldPathCRV4.rotateY', 90.0 )
cmds.makeIdentity( apply=True, t=1, r=1, s=1, n=0 )

sampleCRV = [0.0, 0.25, 0.5, 0.75, 1.0]
sampleTime = [30, 90, 150, 210, 270]
keyAttributes = ['translateX', 'translateY', 'translateZ', 'rotateX', 'rotateY', 'rotateZ']
crvInfoNode = cmds.pointOnCurve( 'foldPathCRV1', ch=True )
cmds.setAttr( crvInfoNode+'.turnOnPercentage', 1 )

# animation - folding keyframes
foldSize = 1.25
foldOffset = 0.25 * math.sqrt(2.0*foldSize*foldSize)
folderConstarintGuideGeoCollection = []
for iCRV in range(4):
	folderConstarintGuideGeoCollection.append( cmds.polyPlane( w=foldSize, h=foldSize, sx=1, sy=1, name="folderGEO1" ) )
	cmds.connectAttr( 'foldPathCRV'+str(iCRV+1)+'Shape'+'.worldSpace[0]', crvInfoNode+'.inputCurve', force=True )
	for iParam, iFrame in zip(sampleCRV, sampleTime): 
		cmds.setAttr( crvInfoNode+'.parameter', iParam )	
		keyValues = []
		for iNode, iAttr in zip([crvInfoNode], ['.position']):
			keyValues.append( cmds.getAttr( iNode+iAttr )[0][0] )
			keyValues.append( cmds.getAttr( iNode+iAttr )[0][1] )
			keyValues.append( cmds.getAttr( iNode+iAttr )[0][2] )
		# manually set rotation
		keyValues.append( 0 + iParam * 180 )
		keyValues.append( 45 + iCRV * 90 )
		keyValues.append( 0 )
		for iAttr, iVal in zip(keyAttributes, keyValues):
			cmds.setKeyframe( folderConstarintGuideGeoCollection[-1], attribute=iAttr, v=iVal, t=iFrame )
	cmds.setKeyframe( folderConstarintGuideGeoCollection[-1], attribute='translateX', v=foldOffset * math.cos(0.5*math.pi*iCRV) + foldOffset * math.sin(0.5*math.pi*iCRV), t=340 )
	cmds.setKeyframe( folderConstarintGuideGeoCollection[-1], attribute='translateY', v=0.1, t=340 )
	cmds.setKeyframe( folderConstarintGuideGeoCollection[-1], attribute='translateZ', v=foldOffset * math.cos(0.5*math.pi*iCRV) - foldOffset * math.sin(0.5*math.pi*iCRV), t=340 )
	cmds.setKeyframe( folderConstarintGuideGeoCollection[-1], attribute='rotateX', v=175, t=340 )

# geometry - stitching up the pinwheel
cmds.select( 'pinwheelGEO1' )
getVertsBB( xMin=-1.35, xMax=1.35, zMin=-1.35, zMax=1.35)
cmds.polyMergeVertex( d=0.01 )
cmds.select( clear=True )

# fx - nucleus & nCloth for pinwheel
nucleus = cmds.createNode( 'nucleus', name="nucleus1" )
ncloth = cmds.createNode( 'nCloth', name="nClothShape1" )
mesh = cmds.createNode( 'mesh', name="outputCloth1" )
cmds.connectAttr( 'pinwheelGEO1' + '.worldMesh[0]', ncloth + '.inputMesh' )
cmds.connectAttr( ncloth + '.outputMesh', mesh + '.inMesh' )
cmds.connectAttr( 'time1.outTime', nucleus + '.currentTime' )
cmds.connectAttr( 'time1.outTime', ncloth + '.currentTime' )
cmds.connectAttr( ncloth + '.currentState', nucleus + '.inputActive[0]' )
cmds.connectAttr( ncloth + '.startState', nucleus + '.inputActiveStart[0]' )
cmds.connectAttr( nucleus + '.outputObjects[0]', ncloth + '.nextState' )
cmds.connectAttr( nucleus + '.startFrame', ncloth + '.startFrame' )
cmds.sets(mesh, addElement='initialShadingGroup' )
	
# fx - colliders (makeCollideNCloth)
for iCol, iColName in enumerate(['groundPlaneGEO1', 'flattenPlaneGEO1', 'flattenCylinderGEO1'], 0):
	cmds.createNode( 'transform', name="nRigid"+str(iCol+1) )
	collider = cmds.createNode( 'nRigid', name="nRigidShape"+str(iCol+1), p="nRigid"+str(iCol+1) )
	cmds.connectAttr( iColName + '.worldMesh[0]', collider + '.inputMesh' )
	cmds.connectAttr( 'time1.outTime', collider + '.currentTime' )
	cmds.connectAttr( nucleus + '.startFrame', collider + '.startFrame' )
	cmds.connectAttr( collider + '.currentState', nucleus + '.inputPassive['+str(iCol)+']' )
	cmds.connectAttr( collider + '.startState', nucleus + '.inputPassiveStart['+str(iCol)+']' )
	cmds.setAttr( collider + '.thickness', 0.042 )

# fx - constraint mid section (createNConstraint)
cmds.select( clear=True )
cmds.select( 'pinwheelGEO1' )
getVertsBB( xMin=-1.2, xMax=1.2, zMin=-1.2, zMax=1.2)
mel.eval( 'createNConstraint transform 0' )

# fx - constraint tips (createNConstraint)
for iCRV in range(4):
	cmds.select( clear=True )
	cmds.select( 'pinwheelGEO1' )
	foldPlane = [ om.MVector( (-math.cos(-iCRV*0.5*math.pi)-math.sin(-iCRV*0.5*math.pi)), 0 , (math.cos(-iCRV*0.5*math.pi)-math.sin(-iCRV*0.5*math.pi)) ) / math.sqrt(2.0), -0.001 ]
	crossPlane = [ om.MVector( (-math.cos(-iCRV*0.5*math.pi)+math.sin(-iCRV*0.5*math.pi)), 0 , (-math.cos(-iCRV*0.5*math.pi)-math.sin(-iCRV*0.5*math.pi)) ) / math.sqrt(2.0), math.sqrt(4*4+4*4)-foldSize/2.0 ]
	getVertsPlane( [ crossPlane, foldPlane ] )
	cmds.select( 'folderGEO'+str(iCRV+1), tgl=True )
	mel.eval( 'createNConstraint transform 0' )

# fx - nucleus & clotch properties
cmds.select( clear=True )
cmds.setAttr( 'nucleus1.subSteps', 64 )
cmds.setAttr( 'nucleus1.maxCollisionIterations', 16 )
cmds.setAttr( 'nucleus1.gravity', 0.98 )
cmds.setAttr( 'nClothShape1.selfCollide', 0 )
cmds.setAttr( 'nClothShape1.stretchResistance', 256 )
cmds.setAttr( 'nClothShape1.compressionResistance', 0 )
cmds.setAttr( 'nClothShape1.bendResistance', 256 )
cmds.setAttr( 'nClothShape1.bendAngleDropoff', 0.2 )
cmds.setAttr( 'nClothShape1.shearResistance', 16 )
cmds.setAttr( 'nClothShape1.restitutionAngle', 4 )
cmds.setAttr( 'nClothShape1.restitutionTension', 1024 )
cmds.setAttr( 'nClothShape1.pointMass', 0.024 )
cmds.setAttr( 'nClothShape1.thickness', 0.03 )
cmds.setAttr( 'nClothShape1.selfCollideWidthScale', 3 )

# uv - copy uv data to nCloth mesh
cmds.transferAttributes( 'pinwheelGEO1', 'polySurface1', transferPositions=0, transferNormals=0, transferUVs=2, transferColors=0, sampleSpace=4, searchMethod=3, flipUVs=0, colorBorders=1 )

# camera
cmds.setAttr( 'topShape.backgroundColor', 0.5, 0.5, 0.5, type='double3' )

# animation - playback
cmds.playbackOptions( loop='once' )
cmds.playbackOptions( playbackSpeed=0, maxPlaybackSpeed=0 )
cmds.playbackOptions( maxTime=400 )
